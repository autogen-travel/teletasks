import json
import logging
import asyncio
import re
import subprocess
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ api_keys.json
with open('api_keys.json', 'r') as f:
    keys = json.load(f)
BOT_TOKEN = keys['bot_token']

async def handle_new_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.effective_message
    chat_id = message.chat_id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ message.text –∏–ª–∏ –∏–∑ message.caption (–¥–ª—è –º–µ–¥–∏–∞)
    task_title = (message.text or message.caption or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è").strip()

    logging.info(f"üì¨ –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ: {task_title}")

    stop_animation = asyncio.Event()

    async def animate_group_creation():
        dots = ["", ".", "..", "..."]
        i = 0
        while not stop_animation.is_set():
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message.message_id,
                    text=f"–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã{dots[i % 4]}"
                )
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            await asyncio.sleep(0.5)
            i += 1

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    animation_task = asyncio.create_task(animate_group_creation())

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã, –ø–µ—Ä–µ–¥–∞–≤–∞—è –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        result = subprocess.run(
            ["python3", "create_group.py", "--group", task_title],
            capture_output=True,
            text=True,
            check=True
        )
        logging.info(f"‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω:\n{result.stdout}")
    except subprocess.CalledProcessError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: {e.stderr}")
        stop_animation.set()
        await animation_task
        return

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    stop_animation.set()
    await animation_task

    # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –≤ –≤—ã–≤–æ–¥–µ —Å–∫—Ä–∏–ø—Ç–∞
    link_match = re.search(r'(https://t\.me/\S+)', result.stdout)
    if link_match:
        invite_link = link_match.group(1)
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message.message_id,
                text=f"{task_title}\n\nüìé –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É: {invite_link}"
            )
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π: {e}")
    else:
        logging.warning("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤—ã–≤–æ–¥–µ —Å–∫—Ä–∏–ø—Ç–∞.")

async def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –§–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–µ (—Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ caption)
    post_filter = filters.UpdateType.CHANNEL_POST & (filters.TEXT | filters.Caption())

    application.add_handler(MessageHandler(post_filter, handle_new_post))

    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤...")
    await application.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())