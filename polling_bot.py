import json
import logging
import asyncio
import subprocess
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ api_keys.json
with open('api_keys.json', 'r') as f:
    keys = json.load(f)
BOT_TOKEN = keys['bot_token']


async def animate_edit(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int):
    """–ê–Ω–∏–º–∞—Ü–∏—è —Å —Ü–∏–∫–ª–æ–º '—Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã...', —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"""
    states = [
        "—Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã",
        "—Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.",
        "—Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã..",
        "—Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã...",
    ]
    for _ in range(3):  # –ø–æ–≤—Ç–æ—Ä–∏–º –∞–Ω–∏–º–∞—Ü–∏—é 3 —Ä–∞–∑–∞
        for state in states:
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=state
                )
                await asyncio.sleep(0.7)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")
                return


async def handle_new_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.channel_post
    if not message or not message.text:
        logging.info("–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return

    post_text = message.text.strip()
    chat_id = message.chat.id
    message_id = message.message_id

    logging.info(f"üì¨ –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ: {post_text}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Ç–æ—Ç –∂–µ –ø–æ—Å—Ç
    animation_task = asyncio.create_task(animate_edit(context, chat_id, message_id))

    # –ó–∞–ø—É—Å–∫–∞–µ–º create_group.py –∫–∞–∫ subprocess
    try:
        # –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã - –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ—Ç –∂–µ, —á—Ç–æ –∏ –ø–æ—Å—Ç
        process = await asyncio.create_subprocess_exec(
            'python3', 'create_group.py', '--group', post_text,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await process.communicate()

        animation_task.cancel()  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞

        if process.returncode != 0:
            logging.error(f"create_group.py –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:\n{stderr.decode()}")
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=post_text)
            return

        output = stdout.decode()
        logging.info(f"‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω:\n{output}")

        # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–∑ –≤—ã–≤–æ–¥–∞ (–ø—Ä–∏–º–µ—Ä)
        import re
        link_match = re.search(r'(https?://t\.me/[\w\+\-]+)', output)
        if not link_match:
            logging.warning("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤—ã–≤–æ–¥–µ —Å–∫—Ä–∏–ø—Ç–∞.")
            # –ü—Ä–æ—Å—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Å—Ç
            await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=post_text)
            return

        invite_link = link_match.group(1)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏
        new_text = f"{post_text}\n\nüëâ [–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É]({invite_link})"
        await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=new_text, parse_mode="Markdown")

    except asyncio.CancelledError:
        logging.info("–ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Å—Ç
        await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=post_text)


if __name__ == '__main__':
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –§–∏–ª—å—Ç—Ä: –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    post_filter = filters.UpdateType.CHANNEL_POST & filters.TEXT

    application.add_handler(MessageHandler(post_filter, handle_new_post))

    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤...")
    application.run_polling()