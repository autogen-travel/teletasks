import json
import logging
import subprocess
import time
import asyncio
from telegram import Bot, Update
from telegram.ext import Application, MessageHandler, filters
from telegram.constants import ParseMode

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ó–∞–≥—Ä—É–∑–∫–∞ API-–∫–ª—é—á–µ–π
with open('api_keys.json', 'r') as f:
    keys = json.load(f)

BOT_TOKEN = keys["bot_token"]
CHANNEL_USERNAME = f"@{keys['bot_username']}"  # –∏–ª–∏ –¥—Ä—É–≥–æ–µ –∏–º—è, –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –∏ –∑–∞–¥–∞—á–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
edit_task = None
stop_animation = False

# –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ "—Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"
async def animate_edit(bot: Bot, chat_id, message_id):
    global stop_animation
    dots = ["", ".", "..", "...", "..", "."]
    i = 0
    while not stop_animation:
        try:
            text = f"<i>–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã{dots[i % len(dots)]}</i>"
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                parse_mode=ParseMode.HTML
            )
            i += 1
            await asyncio.sleep(0.8)
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            break

async def handle_new_post(update: Update, context):
    global edit_task, stop_animation

    message = update.effective_message
    chat_id = message.chat_id
    message_id = message.message_id
    task_title = message.text.strip()

    logging.info(f"üì¨ –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ: {task_title}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    stop_animation = False
    edit_task = asyncio.create_task(animate_edit(context.bot, chat_id, message_id))

    # –ó–∞–ø—É—Å–∫–∞–µ–º create_group.py
    try:
        process = subprocess.run(
            [
                "python3", "create_group.py",
                "--group", task_title
            ],
            capture_output=True,
            text=True
        )
        output = process.stdout.strip()
        logging.info(f"‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω:\n{output}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        output = ""

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    stop_animation = True
    if edit_task:
        await edit_task

    # –ò—â–µ–º —Å—Å—ã–ª–∫—É –≤ –≤—ã–≤–æ–¥–µ
    link = next((line for line in output.splitlines() if line.startswith("https://t.me/")), None)
    if link:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"{task_title}\n\nüîó <a href='{link}'>–ß–∞—Ç –ø–æ –∑–∞–¥–∞—á–µ</a>",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    else:
        logging.warning("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤—ã–≤–æ–¥–µ —Å–∫—Ä–∏–ø—Ç–∞.")

async def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(MessageHandler(filters.ALL, handle_new_post))
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤...")
    await application.run_polling()

if __name__ == '__main__':
    asyncio.run(main())