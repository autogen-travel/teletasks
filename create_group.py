import json
import asyncio
import logging
import argparse
from telethon import TelegramClient
from telethon.errors import UserPrivacyRestrictedError, UsernameNotOccupiedError
from telethon.tl.functions.contacts import ResolveUsernameRequest
from telethon.tl.functions.channels import CreateChannelRequest, InviteToChannelRequest, EditAdminRequest
from telethon.tl.types import ChatAdminRights

from telethon.tl.functions.messages import ExportChatInviteRequest

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('group_creator.log'),
        logging.StreamHandler()
    ]
)

# –ó–∞–≥—Ä—É–∑–∫–∞ API-–∫–ª—é—á–µ–π
with open('api_keys.json', 'r') as f:
    api_keys = json.load(f)

api_id = api_keys['api_id']
api_hash = api_keys['api_hash']
phone_number = api_keys['phone_number']
user_username = api_keys['user_username']
bot_username = api_keys['bot_username']
default_group_title = api_keys['group_title']
default_group_about = api_keys['group_about']

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(phone_number, api_id, api_hash, device_model='iPhone 13 Pro', system_version='4.16.30-vxCUSTOM')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
async def group_exists(client, group_title):
    dialogs = await client.get_dialogs()
    return any(dialog.name == group_title for dialog in dialogs)

async def main(group_title_override=None, group_about_override=None, raw_user_list=None):
    await client.start()
    logging.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")

    group_title = group_title_override or default_group_title
    logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã '{group_title}'...")
    await asyncio.sleep(2)

    if await group_exists(client, group_title):
        logging.warning(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ '{group_title}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user = (await client(ResolveUsernameRequest(user_username))).users[0]
        logging.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_username} –Ω–∞–π–¥–µ–Ω.")
    except UsernameNotOccupiedError:
        logging.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await asyncio.sleep(2)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç–∞
    try:
        bot = (await client(ResolveUsernameRequest(bot_username))).users[0]
        logging.info(f"ü§ñ –ë–æ—Ç @{bot_username} –Ω–∞–π–¥–µ–Ω.")
    except UsernameNotOccupiedError:
        logging.error(f"‚ùå –ë–æ—Ç @{bot_username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await asyncio.sleep(2)

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    logging.info("üöÄ –°–æ–∑–¥–∞—ë–º —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É...")
    result = await client(CreateChannelRequest(
        title=group_title,
        about=group_about_override or default_group_about,
        megagroup=True
    ))
    channel = result.chats[0]
    logging.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_title}' —Å–æ–∑–¥–∞–Ω–∞.")
    await asyncio.sleep(3)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ—Ç–∞
    for participant in [user, bot]:
        try:
            await client(InviteToChannelRequest(channel=channel, users=[participant]))
            logging.info(f"‚ûï –£—á–∞—Å—Ç–Ω–∏–∫ {getattr(participant, 'username', participant.id)} –¥–æ–±–∞–≤–ª–µ–Ω.")
            await asyncio.sleep(2)
        except UserPrivacyRestrictedError:
            logging.warning(f"‚ö†Ô∏è {getattr(participant, 'username', participant.id)} –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {participant.id}: {e}")

    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º
    rights = ChatAdminRights(
        change_info=False,
        post_messages=True,
        edit_messages=True,
        delete_messages=True,
        ban_users=True,
        invite_users=True,
        pin_messages=True,
        add_admins=False,
        manage_call=True,
        anonymous=False,
        manage_topics=True
    )
    try:
        await client(EditAdminRequest(
            channel=channel,
            user_id=bot,
            admin_rights=rights,
            rank='–ë–æ—Ç'
        ))
        logging.info(f"üõ° –ë–æ—Ç @{bot_username} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º: {e}")
    await asyncio.sleep(2)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if raw_user_list:
        for entry in raw_user_list:
            entry = entry.strip()
            try:
                if entry.isdigit():
                    entity = await client.get_entity(int(entry))
                else:
                    entity = await client.get_entity(entry)
                await client(InviteToChannelRequest(channel=channel, users=[entity]))
                logging.info(f"‚úÖ {getattr(entity, 'username', entity.id)} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É.")
                await asyncio.sleep(2)
            except UserPrivacyRestrictedError:
                logging.warning(f"üö´ {entry} –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã.")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {entry}: {e}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    invite = await client(ExportChatInviteRequest(peer=channel))
    print(invite.link)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='–°–æ–∑–¥–∞–Ω–∏–µ Telegram-–≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ Telethon')
    parser.add_argument('--group', help='–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π –≥—Ä—É–ø–ø—ã (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç config)', type=str)
    parser.add_argument('--users', help='–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: username –∏–ª–∏ ID', type=str)
    parser.add_argument('--about', help='–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã', type=str)
    args = parser.parse_args()

    users = args.users.split(',') if args.users else []
    asyncio.run(main(group_title_override=args.group, group_about_override=args.about, raw_user_list=users))