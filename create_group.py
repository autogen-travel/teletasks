import json
import asyncio
import logging
import argparse
from telethon import TelegramClient
from telethon.errors import UserPrivacyRestrictedError, UsernameNotOccupiedError
from telethon.tl.functions.contacts import ResolveUsernameRequest
from telethon.tl.functions.channels import CreateChannelRequest, InviteToChannelRequest, EditAdminRequest
from telethon.tl.functions.messages import ExportChatInviteRequest, SendMessageRequest
from telethon.tl.types import ChatAdminRights

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('group_creator.log'),
        logging.StreamHandler()
    ]
)

with open('api_keys.json', 'r') as f:
    api_keys = json.load(f)

api_id = api_keys['api_id']
api_hash = api_keys['api_hash']
phone_number = api_keys['phone_number']
user_username = api_keys['user_username']
bot_username = api_keys['bot_username']
default_group_title = api_keys['group_title']
default_group_about = api_keys['group_about']

client = TelegramClient(phone_number, api_id, api_hash, device_model='iPhone 13 Pro', system_version='4.16.30-vxCUSTOM')


async def group_exists(client, group_title):
    dialogs = await client.get_dialogs()
    return any(dialog.name == group_title for dialog in dialogs)


async def main(group_title_override=None, group_about_override=None, raw_user_list=None, author_username=None, first_post=None):
    await client.start()
    logging.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")

    group_title = group_title_override or default_group_title
    if await group_exists(client, group_title):
        logging.warning(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ '{group_title}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    try:
        user = (await client(ResolveUsernameRequest(user_username))).users[0]
    except UsernameNotOccupiedError:
        logging.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        bot = (await client(ResolveUsernameRequest(bot_username))).users[0]
    except UsernameNotOccupiedError:
        logging.error(f"‚ùå –ë–æ—Ç @{bot_username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    result = await client(CreateChannelRequest(
        title=group_title,
        about=group_about_override or default_group_about,
        megagroup=True
    ))
    channel = result.chats[0]
    logging.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_title}' —Å–æ–∑–¥–∞–Ω–∞.")

    for participant in [user, bot]:
        try:
            await client(InviteToChannelRequest(channel=channel, users=[participant]))
            logging.info(f"‚ûï {participant.username} –¥–æ–±–∞–≤–ª–µ–Ω.")
            await asyncio.sleep(2)
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {participant.username}: {e}")

    try:
        await client(EditAdminRequest(
            channel=channel,
            user_id=bot,
            admin_rights=ChatAdminRights(
                change_info=False,
                post_messages=True,
                edit_messages=True,
                delete_messages=True,
                ban_users=True,
                invite_users=True,
                pin_messages=True,
                add_admins=False,
                manage_call=True,
                anonymous=False,
                manage_topics=True
            ),
            rank='–ë–æ—Ç'
        ))
        logging.info(f"üõ° –ë–æ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º.")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º: {e}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞–¥–º–∏–Ω–æ–º
    if author_username:
        try:
            author = await client.get_entity(author_username)
            await client(InviteToChannelRequest(channel=channel, users=[author]))
            await asyncio.sleep(2)
            await client(EditAdminRequest(
                channel=channel,
                user_id=author,
                admin_rights=ChatAdminRights(
                    change_info=False,
                    post_messages=True,
                    edit_messages=True,
                    delete_messages=True,
                    ban_users=True,
                    invite_users=True,
                    pin_messages=True,
                    add_admins=False,
                    manage_call=True,
                    anonymous=False,
                    manage_topics=True
                ),
                rank='–ê–≤—Ç–æ—Ä –ø–æ—Å—Ç–∞'
            ))
            logging.info(f"üëë –ê–≤—Ç–æ—Ä @{author_username} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å/–Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–≤—Ç–æ—Ä–∞: {e}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if first_post:
        try:
            await client.send_message(channel, message=first_post)
            logging.info("üì© –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ —Å—Å—ã–ª–∫–∏
    invite = await client(ExportChatInviteRequest(peer=channel))
    print(invite.link)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='–°–æ–∑–¥–∞–Ω–∏–µ Telegram-–≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ Telethon')
    parser.add_argument('--group', help='–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π –≥—Ä—É–ø–ø—ã', type=str)
    parser.add_argument('--users', help='–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é', type=str)
    parser.add_argument('--about', help='–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã', type=str)
    parser.add_argument('--author', help='–ê–≤—Ç–æ—Ä –ø–æ—Å—Ç–∞ (username)', type=str)
    parser.add_argument('--first-post', help='–¢–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', type=str)
    args = parser.parse_args()

    users = args.users.split(',') if args.users else []
    asyncio.run(main(
        group_title_override=args.group,
        group_about_override=args.about,
        raw_user_list=users,
        author_username=args.author,
        first_post=args.first_post
    ))