import logging
import asyncio
from configparser import ConfigParser
from telethon import TelegramClient, events
from telethon.tl.functions.channels import CreateChannelRequest, InviteToChannelRequest, EditAdminRequest, GetParticipantRequest
from telethon.tl.functions.messages import ForwardMessagesRequest, EditMessageRequest
from telethon.tl.types import (ChannelParticipantsRecent, ChatAdminRights,
                                ChannelParticipantAdmin, ChannelParticipantCreator)
from telegram import Bot
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = ConfigParser()
config.read('config.ini')

API_ID = config.getint('telethon', 'api_id')
API_HASH = config.get('telethon', 'api_hash')
SESSION_NAME = config.get('telethon', 'session')
BOT_TOKEN = config.get('bot', 'token')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
bot = Bot(token=BOT_TOKEN)
client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

async def get_channel_participants(channel):
    participants = []
    async for user in client.iter_participants(channel, filter=ChannelParticipantsRecent):
        participants.append(user)
    return participants

@client.on(events.NewMessage(chats=None))
async def handler(event):
    if not event.is_channel or not event.message.message:
        return

    channel = await event.get_chat()
    message = event.message
    original_text = message.message
    author_id = message.from_id.user_id if message.from_id else None

    logging.info(f"üì¨ –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ {channel.title}")

    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
    creating_note = "\n\n‚è≥ –ò–¥—ë—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã..."
    try:
        await bot.edit_message_text(chat_id=channel.id, message_id=message.id, text=original_text + creating_note)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç: {e}")

    # –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
    snippet = original_text[:200].replace('\n', ' ')
    group_title = f"{channel.title} - {snippet}"

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    result = await client(CreateChannelRequest(
        title=group_title,
        about="–ì—Ä—É–ø–ø–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø–æ—Å—Ç–∞",
        megagroup=True
    ))
    new_group = result.chats[0]
    logging.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞: {new_group.title}")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants = await get_channel_participants(channel)
    user_ids = [p.id for p in participants if not p.bot]
    logging.info(f"üë• –î–æ–±–∞–≤–ª—è–µ–º {len(user_ids)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
    for i in range(0, len(user_ids), 10):
        try:
            await client(InviteToChannelRequest(new_group.id, user_ids[i:i + 10]))
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")

    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞ –∞–¥–º–∏–Ω–æ–º
    if author_id:
        try:
            author = await client.get_entity(author_id)
            participant = await client(GetParticipantRequest(channel=channel, user_id=author.id))

            if isinstance(participant.participant, (ChannelParticipantAdmin, ChannelParticipantCreator)):
                await client(EditAdminRequest(
                    channel=new_group,
                    user_id=author,
                    admin_rights=ChatAdminRights(
                        change_info=False,
                        post_messages=True,
                        edit_messages=True,
                        delete_messages=True,
                        ban_users=True,
                        invite_users=True,
                        pin_messages=True,
                        add_admins=False,
                        anonymous=False,
                        manage_call=True,
                        manage_topics=True
                    ),
                    rank="–ê–≤—Ç–æ—Ä –ø–æ—Å—Ç–∞"
                ))
                logging.info(f"üõ° –ù–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º: @{author.username if author.username else author.id}")
        except Exception as e:
            logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞: {e}")

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
    try:
        await client(ForwardMessagesRequest(
            from_peer=channel,
            to_peer=new_group,
            id=[message.id],
            with_my_score=False
        ))
        logging.info("üì© –ü–æ—Å—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω –≤ –≥—Ä—É–ø–ø—É")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å —Å—Å—ã–ª–∫–æ–π
    group_link = f"https://t.me/c/{str(new_group.id)[4:]}/1"
    final_text = original_text + f"\n\n‚û° –û–±—Å—É–∂–¥–µ–Ω–∏–µ: {group_link}"
    try:
        await bot.edit_message_text(chat_id=channel.id, message_id=message.id, text=final_text, parse_mode=ParseMode.HTML)
        logging.info("‚úèÔ∏è –ü–æ—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≥—Ä—É–ø–ø—É")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç: {e}")

async def main():
    await client.start()
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())